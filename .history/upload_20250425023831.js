import streamlit as st
import google.generativeai as genai
from PIL import Image
import os # Para lidar com vari√°veis de ambiente (opcional, mas recomendado)

# --- Configura√ß√£o da API Key do Google AI ---
# √â MAIS SEGURO usar segredos do Streamlit ou vari√°veis de ambiente
# NUNCA coloque sua chave de API diretamente no c√≥digo em produ√ß√£o!

# Tenta obter a chave da API das secrets do Streamlit (ideal para deploy)
try:
    GOOGLE_API_KEY = st.secrets["GOOGLE_API_KEY"]
# Se n√£o encontrar, tenta obter de uma vari√°vel de ambiente (bom para desenvolvimento local)
except KeyError:
    try:
        GOOGLE_API_KEY = os.environ["GOOGLE_API_KEY"]
    # Se ainda n√£o encontrar, pede ao usu√°rio (MENOS SEGURO, apenas para teste r√°pido)
    except KeyError:
        st.warning("üîë Chave da API do Google n√£o encontrada nas secrets ou vari√°veis de ambiente.")
        GOOGLE_API_KEY = st.text_input("Insira sua Google API Key:", type="password")

# Se a chave n√£o foi fornecida de nenhuma forma, para a execu√ß√£o
if not GOOGLE_API_KEY:
    st.error("A Chave da API do Google √© necess√°ria para executar o aplicativo.")
    st.stop()

# Configura a biblioteca do Google AI com a chave
try:
    genai.configure(api_key=GOOGLE_API_KEY)
except Exception as e:
    st.error(f"Erro ao configurar a API do Google: {e}")
    st.stop()

# --- Configura√ß√£o do Modelo Generativo ---
# Escolha um modelo que suporte vis√£o (multimodal)
# 'gemini-1.5-flash-latest' √© uma boa op√ß√£o r√°pida e capaz
# 'gemini-pro-vision' era o modelo anterior comum para isso
try:
    model = genai.GenerativeModel('gemini-1.5-flash-latest') # Ou 'gemini-pro-vision'
except Exception as e:
    st.error(f"Erro ao carregar o modelo Generativo: {e}")
    st.stop()


# --- Interface do Usu√°rio com Streamlit ---
st.title("ü§ñ Chatbot de Ag√™ncia de Turismo")
st.subheader("Identificador de Locais por Imagem üì∏")
st.write("Fa√ßa o upload de uma imagem de um ponto tur√≠stico e eu tentarei identificar onde √©!")

# Componente para fazer upload de arquivo
uploaded_file = st.file_uploader("Escolha uma imagem...", type=["jpg", "jpeg", "png"])

image = None # Vari√°vel para guardar a imagem aberta

if uploaded_file is not None:
    # Abre a imagem usando a biblioteca Pillow (PIL)
    image = Image.open(uploaded_file)

    # Mostra a imagem na tela
    st.image(image, caption='Imagem Carregada.', use_column_width=True)

    # Bot√£o para iniciar a an√°lise
    if st.button("üîç Identificar Local na Imagem"):
        with st.spinner("Analisando a imagem... Por favor, aguarde."): # Mostra uma mensagem de 'carregando'
            try:
                # Prepara o prompt para o modelo multimodal
                # Enviamos o texto da pergunta E a imagem
                prompt_parts = [
                    "Que local √© mostrado nesta imagem? Seja espec√≠fico sobre o nome do ponto tur√≠stico, cidade e pa√≠s, se poss√≠vel. Responda em portugu√™s.",
                    image, # O objeto Image do Pillow
                ]

                # Chama a API do Google Generative AI
                response = model.generate_content(prompt_parts)

                # Mostra a resposta
                st.success("An√°lise Conclu√≠da!")
                st.markdown("---") # Linha divis√≥ria
                st.subheader("Resultado da An√°lise:")
                st.write(response.text)

            except Exception as e:
                st.error(f"üò• Ocorreu um erro durante a an√°lise:")
                st.error(e)
                # Voc√™ pode querer adicionar mais detalhes do erro para debugging
                # st.exception(e)

# Mensagem se o bot√£o for clicado sem imagem
elif st.button("üîç Identificar Local na Imagem"):
     st.warning("Por favor, carregue uma imagem primeiro.")